// Prisma schema for NiceSchool
// This file defines all tables and relationships based on your entities

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  firstName           String
  lastName            String
  studentNumber       String?              @unique
  role                UserRole             @default(ADMIN)
  profileImage        String?
  phone               String?
  dateOfBirth         DateTime?
  isActive            Boolean              @default(true)
  lastLogin           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  news                News[]
  eventRegistrations  EventRegistration[]
  applications        Application[]
  passwordResetTokens PasswordResetToken[]
  // Academics relations
  enrollments         Enrollment[]
  // direct program/course memberships
  studentPrograms     StudentProgram[]
  studentCourses      StudentCourse[]
  assignmentSubmissions AssignmentSubmission[]
  examResults         ExamResult[]
  attendances         Attendance[]
}

enum UserRole {
  STUDENT
  ADMIN
  FACULTY
  ALUMNI
}

model Application {
  id                String            @id @default(uuid())
  applicant         User              @relation(fields: [applicantId], references: [id])
  applicantId       String
  program           Program?          @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId         String?
  course            Course?           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String?
  academicYear      String
  status            ApplicationStatus @default(PENDING)
  personalInfo      Json?
  academicInfo      Json?
  documents         Json?
  personalStatement String?
  adminNotes        String?
  submittedAt       DateTime?
  reviewedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Faculty {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  email           String   @unique
  department      String
  position        String
  bio             String?
  profileImage    String?
  phone           String?
  office          String?
  specializations String[]
  education       String[]
  publications    String[]
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Academics relations
  headedDepartments Department[]
  courses          Course[]
  assignmentsPosted Assignment[]
  gradedSubmissions AssignmentSubmission[]
  examsCreated     Exam[]
  timetableEntries TimetableEntry[]
  recordedAttendances Attendance[]
}

model News {
  id          String   @id @default(uuid())
  title       String
  content     String
  excerpt     String?
  imageUrl    String?
  category    String   @default("general")
  isPublished Boolean  @default(true)
  publishedAt DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id                 String              @id @default(uuid())
  title              String
  description        String
  startDate          DateTime
  endDate            DateTime
  location           String
  imageUrl           String?
  category           String              @default("general")
  isRegistrationOpen Boolean             @default(true)
  maxAttendees       Int                 @default(100)
  price              Decimal             @default(0)
  isPublished        Boolean             @default(true)
  registrations      EventRegistration[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model EventRegistration {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String
  status       String   @default("registered")
  notes        String?
  registeredAt DateTime @default(now())

  @@unique([userId, eventId])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// --- Academics / SIS models (Courses, Programs, Departments, Class cohorts, Enrollments,
// Assignments, Submissions, Exams, Results, Attendance, Grade scales, Timetables)

model Department {
  id          String    @id @default(uuid())
  name        String
  code        String    @unique
  description String?
  head        Faculty?  @relation(fields: [headId], references: [id])
  headId      String?
  programs    Program[]
  courses     Course[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProgramLevel {
  UNDERGRAD
  POSTGRAD
  DIPLOMA
  CERTIFICATE
}

model Program {
  id           String    @id @default(uuid())
  name         String
  code         String    @unique
  level        ProgramLevel
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  durationYears Int
  description  String?
  courses      Course[]
  studentPrograms StudentProgram[]
  cohorts      Cohort[]
  applications Application[]
  gradeScales  GradeScale[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Course {
  id            String    @id @default(uuid())
  code          String    @unique
  title         String
  description   String?
  credits       Int       @default(3)
  department    Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId  String?
  program       Program?  @relation(fields: [programId], references: [id], onDelete: SetNull)
  programId     String?
  semester      String?
  instructors   Faculty[]
  assignments   Assignment[]
  exams         Exam[]
  applications  Application[]
  studentCourses StudentCourse[]
  timetableEntries TimetableEntry[]
  attendances   Attendance[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Cohort {
  id         String    @id @default(uuid())
  name       String
  program    Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId  String
  intakeYear Int
  students   Enrollment[]
  timetable  TimetableEntry[]
  attendances Attendance[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Enrollment {
  id         String   @id @default(uuid())
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  cohort     Cohort   @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  cohortId   String
  status     String   @default("active")
  enrolledAt DateTime @default(now())
  leftAt     DateTime?

  @@unique([studentId, cohortId])
  @@index([cohortId])
}

model Assignment {
  id           String    @id @default(uuid())
  title        String
  description  String?
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  postedBy     Faculty?  @relation(fields: [postedById], references: [id], onDelete: SetNull)
  postedById   String?
  postedAt     DateTime  @default(now())
  dueDate      DateTime?
  totalMarks   Int       @default(100)
  submissions  AssignmentSubmission[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model AssignmentSubmission {
  id             String   @id @default(uuid())
  assignment     Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId   String
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  submittedAt    DateTime @default(now())
  submissionText String?
  fileUrl        String?
  marksAwarded   Int?
  gradedBy       Faculty? @relation(fields: [gradedById], references: [id], onDelete: SetNull)
  gradedById     String?
  gradedAt       DateTime?
  feedback       String?

  @@unique([assignmentId, studentId])
  @@index([studentId])
}

enum ExamType {
  QUIZ
  MIDTERM
  FINAL
  PRACTICAL
  ORAL
}

model Exam {
  id          String    @id @default(uuid())
  title       String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  examDate    DateTime
  durationMin Int
  totalMarks  Int       @default(100)
  examType    ExamType  @default(FINAL)
  createdBy   Faculty?  @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?
  isPublished Boolean   @default(false)
  results     ExamResult[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ExamResult {
  id          String   @id @default(uuid())
  exam        Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId      String
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  marks       Int
  grade       String?
  remarks     String?
  recordedAt  DateTime @default(now())

  @@unique([examId, studentId])
  @@index([studentId])
}

model GradeScale {
  id         String  @id @default(uuid())
  program    Program? @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId  String?
  minMarks   Int
  maxMarks   Int
  grade      String
  points     Float
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model TimetableEntry {
  id         String   @id @default(uuid())
  cohort     Cohort   @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  cohortId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  instructor Faculty? @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId String?
  day        DayOfWeek
  startTime  DateTime
  endTime    DateTime
  location   String?
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model Attendance {
  id         String   @id @default(uuid())
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  cohort     Cohort?  @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  cohortId   String?
  course     Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String?
  date       DateTime
  status     AttendanceStatus @default(PRESENT)
  recordedBy Faculty?  @relation(fields: [recordedById], references: [id], onDelete: SetNull)
  recordedById String?
  remarks    String?

  @@index([studentId, date])
}

// Link academic relations into existing models

// Student membership tables: link users to programs and courses directly so approved applicants
// can be recorded as students of a program or course without requiring a Cohort enrollment.
model StudentProgram {
  id         String   @id @default(uuid())
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  program    Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId  String
  enrolledAt DateTime @default(now())

  @@unique([studentId, programId])
}

model StudentCourse {
  id         String   @id @default(uuid())
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  enrolledAt DateTime @default(now())

  @@unique([studentId, courseId])
}

